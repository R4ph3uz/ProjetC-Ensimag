#ifndef DRAW_UTILS_H
#define DRAW_UTILS_H

#include "ei_types.h"
#include "hw_interface.h"
#include "../widgetclass/ei_entry.h"


typedef enum rounded_frame_part {
    full,
    low,
    high
} rounded_frame_part;


/**
 * @brief take the rectangle and create an array of point corresponding to the rectangle
 * @param rectangle
 * @return array of 4 points corresponding to the rectangle
 */
ei_point_t* rect_to_point(ei_rect_t rectangle) ;

/**
 * @brief
 * @param rayon Rayon de l'arc
 * @param angle_debut Angle du debut de l'arc (en degré)
 * @param angle_fin Angle de fin de l'arc (en degré)
 * @return le nombre de point nécéssaire pour tracer l'arc de cercle
 */
size_t get_polygon_arc_size(uint32_t rayon,
                        uint32_t angle_debut,
                        uint32_t angle_fin);

/**
 * \brief	Create a tab of points representing an arc
 *
 * @param	centre	Centre de l'arc
 * @param   rayon   Rayon de l'arc
 * @param	angle_debut		Angle du debut de l'arc (en degré)
 * @param	angle_fin		Angle de fin de l'arc (en degré)
 * @param	tab tableau dans lequel ajouter les éléments (le tableau doit deja avoir été alloué avec la taille nécéssaire)
 *
*/
void polygon_arc(ei_point_t centre,
                        uint32_t rayon,
                        uint32_t angle_debut,
                        uint32_t angle_fin,
                        ei_point_t* tab);



/**
 * \brief	crée un tableau de points définissant un cadre aux bords arrondis
 *
 * @param	rectangle	rectangle comprenant le truc a dessiner
 * @param	rayon		rayon de l'arrondi
 * @param	part	    génère uniquement la partie haute, ou basse, ou bien la totalité de la forme
 * @param nb_concat met a *nb_concat la taille du tableau renvoyé
 *
 */
ei_point_t* rounded_frame(ei_rect_t* rectangle,
                            uint32_t rayon,
                            rounded_frame_part part,
                            size_t* nb_concat
                            );

/**
 * \brief	crée un tableau de points en ajoutant les points de points1 a points2, alloc un nouveau tableau de size1 + size2
 *
 * @param	points1 tableau de point 1
 * @param	points2		tableau de point 2
 * @param	size1	    taille de tableau point1
 * @param   size2   taille de tableau point2
 *
 */
ei_point_t* concatene_points(ei_point_t* points1, ei_point_t* points2, size_t size1, size_t size2);

/**
 * \brief	dessine un bouton (change selon le relief, la taille du rectangle et sa place)
 *          Surface must be lock before calling the function
 *
 * @param	surface surface sur laquelle dessiner
 * @param	rectangle	rectangle dans lequel inclure le bouton
 * @param radius rayon de l'arrondi
 * @param	color	    couleur du bouton
 * @param   relief  relief du bouton
 * @param   clipper clipper
 */
void draw_button(ei_surface_t surface, ei_rect_t rectangle,int radius,ei_color_t color,ei_relief_t  relief, ei_rect_t* clipper);



/**
* \brief	crée un tableau de points définissant un cadre aux bords arrondis
*
* @param	rectangle	Centre de l'arc
* @param	rayon		rayon de l'arrondi
* @param	top	    les bords sont rounded en haut si true, en bas si false
* @param nb_concat met a *nb_concat la taille du tableau renvoyé
*
*/
ei_point_t* demi_rounded_frame(ei_rect_t* rectangle,
                            uint32_t rayon,
                            bool top,
                            size_t* nb_concat
                            );


/**
 * \brief	dessine une toplevel (change selon la taille du rectangle et sa place)
 *          Surface must be lock before calling the function
 *
 * @param	surface surface sur laquelle dessiner
 * @param	rectangle	rectangle dans lequel inclure le bouton
 * @param	color	    couleur du bouton
 * @param radius rayon de l'arrondi
 * @param   clipper clipper
 * @param resizable resizable
 */
void draw_toplevel(ei_surface_t surface, ei_rect_t rectangle,int radius ,ei_color_t color, ei_rect_t* clipper, bool isPicking, ei_axis_set_t* resizable);

/**
 * \brief Generates points lying on the circumference of a circle given its center coordinates and radius.
 *
 * @param centre The center point of the circle.
 * @param radius The radius of the circle.
 * @param size_tableau A pointer to a size_t variable that will store the size of the array of points generated by the function.
 * @return A pointer to an array of ei_point_t structures representing the points lying on the circumference of the circle. Returns NULL if memory allocation fails.
 */
ei_point_t* circle(ei_point_t centre, int radius, size_t* size_tableau);




#endif //DRAW_UTILS_H
